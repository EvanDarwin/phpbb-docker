name: Build on phpBB Release

on:
  workflow_dispatch:
    inputs:
      phpbb_version:
        description: 'phpBB version to build'
        required: false
        default: ''
  schedule:
    # Check for new phpBB releases daily
    - cron: '0 0 * * *'

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  packages: write
  
jobs:
  lint:
    runs-on: ubuntu-latest
    if: >-
      (github.repository == 'evandarwin/docker-phpbb' && github.ref == 'refs/heads/main') ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.actor == 'evandarwin')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint
    # Only run on the main repository and main branch, or from scheduled/manual triggers
    if: >-
      (github.repository == 'evandarwin/docker-phpbb' && github.ref == 'refs/heads/main') ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.actor == 'evandarwin')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Ensure we're checking out the main branch for security
          ref: main

      - name: Get latest phpBB release
        id: get-release
        run: |
          RELEASES=$(curl -s -f -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/phpbb/phpbb/tags)
          
          # Find all release tags, filter for valid ones, and get the first one
          VERSION=$(echo "$RELEASES" | grep -o '"name": "release-[^"]*"' | 
                   grep -v "RC" | 
                   head -1 | 
                   sed 's/"name": "release-//;s/"//g')
          
          if [ -n "${{ github.event.inputs.phpbb_version }}" ]; then
            # Validate manually specified version
            if [[ ! "${{ github.event.inputs.phpbb_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::Invalid version format. Expected format: X.Y.Z"
              exit 1
            fi
            
            echo "Using manually specified version: ${{ github.event.inputs.phpbb_version }}"
            echo "phpbb_version=${{ github.event.inputs.phpbb_version }}" >> $GITHUB_OUTPUT
          elif [ -n "$VERSION" ]; then
            echo "Found release version: $VERSION"
            echo "phpbb_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "No valid phpBB release found"
            exit 1
          fi
          
          # Check if we should skip this build (already built this version)
          LATEST_TAG=$(curl -s -f -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | 
            grep -o '"tag_name": "[^"]*"' | 
            sed 's/"tag_name": "//;s/"//g')
          
          if [ "$LATEST_TAG" = "$VERSION" ] && [ -z "${{ github.event.inputs.phpbb_version }}" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Already built version $VERSION, skipping"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.get-release.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.get-release.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.get-release.outputs.skip != 'true'
        env:
          PHPBB_VERSION: ${{ steps.get-release.outputs.phpbb_version }}
        run: |
          # Build the image with the script
          chmod +x ./scripts/build.sh
          ./scripts/build.sh
          
          # Push the images (the script already tags as latest)
          PHP_VERSION=${PHP_VERSION:-"8.4"}
          PHP_VERSION_CLEAN=$(echo "${PHP_VERSION}" | tr -d '.')
          DOCKER_IMAGE=${DOCKER_IMAGE:-"evandarwin/phpbb"}
          DOCKER_TAG=${DOCKER_TAG:-"$PHPBB_VERSION-php$PHP_VERSION_CLEAN"}
          
          echo "Pushing Docker images..."
          docker push "$DOCKER_IMAGE:$DOCKER_TAG"
          docker push "$DOCKER_IMAGE:latest"
          echo "Successfully built and pushed phpBB $PHPBB_VERSION Docker image!"

      - name: Create GitHub Release
        if: steps.get-release.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: phpBB ${{ steps.get-release.outputs.phpbb_version }}
          tag_name: ${{ steps.get-release.outputs.phpbb_version }}
          generate_release_notes: true
          body: |
            Docker image for phpBB ${{ steps.get-release.outputs.phpbb_version }}
            
            Built automatically from phpBB release ${{ steps.get-release.outputs.phpbb_version }}
            
            Pull with:
            ```
            docker pull evandarwin/phpbb:${{ steps.get-release.outputs.phpbb_version }}
            ```
            
            Or use the latest tag:
            ```
            docker pull evandarwin/phpbb:latest
            ```